@page "/collections"
@rendermode InteractiveServer
@using IonConnectionPackageDemo2.Services
@inject IdoCollectionService MongooseService

<div class="container my-5">
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
            <h3 class="card-title mb-0">Collection Loader</h3>
        </div>
        <div class="card-body">
            @if (loadError)
            {
                <div class="alert alert-danger" role="alert">
                    <strong>Error:</strong> Failed to load configurations. Please try again later.
                </div>
            }

            <div class="mb-3">
                <label for="config" class="form-label">Select Configuration:</label>
                <select id="config" class="form-select" @bind="selectedConfiguration">
                    <option value="">Select a configuration</option>
                    @foreach (var config in availableConfigurations)
                    {
                        <option value="@config">@config</option>
                    }
                </select>
            </div>

            <div class="mb-3">
                <label for="collection" class="form-label">Enter IDO Name:</label>
                <input id="collection" class="form-control" @bind="selectedCollection" placeholder="e.g., SLItems" />
            </div>

            <div class="mb-3">
                <label for="properties" class="form-label">Enter Properties (space-separated):</label>
                <input id="properties" class="form-control" @bind="propertiesInput" placeholder="e.g., Caption CollectionName CreatedBy" />
            </div>

            <div class="mb-3">
                <button class="btn btn-primary" @onclick="LoadCollectionData">Load Collection</button>
            </div>
        </div>
    </div>

    @if (data != null && data.Any())
    {
        <div class="table-responsive mt-4">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        @foreach (var column in columns)
                        {
                            <th>@column</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in data)
                    {
                        <tr>
                            @foreach (var column in columns)
                            {
                                <td>@item[column]</td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else if (hasLoaded && !loadError)
    {
        <div class="alert alert-info mt-4" role="alert">
            No data to display
        </div>
    }
</div>

@code {
    private string selectedCollection;
    private string propertiesInput;
    private string selectedConfiguration;
    private List<string> availableConfigurations = new();
    private List<string> columns = new();
    private List<Dictionary<string, object>> data = new();
    private bool hasLoaded = false;
    private bool loadError = false; 

    protected override async Task OnInitializedAsync()
    {
        try
        {
            availableConfigurations = await MongooseService.GetConfigurationsAsync();

            if (availableConfigurations.Count == 1)
            {
                selectedConfiguration = availableConfigurations[0];
            }

            loadError = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading configurations: {ex.Message}");
            loadError = true;
        }
    }

    private async Task LoadCollectionData()
    {
        hasLoaded = false;

        if (!string.IsNullOrEmpty(selectedCollection) && !string.IsNullOrEmpty(selectedConfiguration))
        {
            try
            {
                var properties = string.Join(",", propertiesInput?.Split(' ', StringSplitOptions.RemoveEmptyEntries) ?? Array.Empty<string>());

                var response = await MongooseService.LoadIdoCollectionAsync(selectedCollection, properties, selectedConfiguration);

                if (response?.Items != null && response.Items.Any())
                {
                    data = response.Items;
                    columns = data.First().Keys.ToList();
                }
                else
                {
                    data = new List<Dictionary<string, object>>();
                    columns = new List<string>();
                }
                loadError = false;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading data: {ex.Message}");
                loadError = true;
            }
        }
        else
        {
            Console.WriteLine("Please select a configuration and enter an IDO name.");
        }

        hasLoaded = true;
    }
}
